"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[7297],{2789:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},5458:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>e});var n=a(7829);const l=[(0,n.Fv)('<h1 id="使用shell脚本批量调用rest接口" tabindex="-1"><a class="header-anchor" href="#使用shell脚本批量调用rest接口"><span>使用Shell脚本批量调用REST接口</span></a></h1><h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍"><span>背景介绍</span></a></h2><p>在日常运维工作中，我们经常需要批量调用REST接口来处理数据或触发某些操作。本文将介绍如何使用Shell脚本来实现批量调用REST接口的功能，并包含完整的日志记录和错误处理机制。</p><h2 id="需求描述" tabindex="-1"><a class="header-anchor" href="#需求描述"><span>需求描述</span></a></h2><ol><li>从文本文件中读取URL列表</li><li>使用curl命令依次调用每个接口</li><li>记录调用结果和响应状态</li><li>统计成功和失败数量</li><li>生成详细的执行日志</li></ol><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案"><span>实现方案</span></a></h2><h3 id="_1-准备url文件" tabindex="-1"><a class="header-anchor" href="#_1-准备url文件"><span>1. 准备URL文件</span></a></h3><p>首先创建一个<code>url.txt</code>文件，每行包含一个需要调用的URL地址：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>http://api.example.com/service/retry/123456789</span></span>\n<span class="line"><span>http://api.example.com/service/retry/987654321</span></span>\n<span class="line"><span>http://api.example.com/service/retry/456789123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-shell脚本实现" tabindex="-1"><a class="header-anchor" href="#_2-shell脚本实现"><span>2. Shell脚本实现</span></a></h3><p>创建批量调用脚本<code>batch_curl.sh</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 定义日志文件</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">LOG_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;curl_results.log&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ERROR_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;curl_errors.log&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 检查url.txt文件是否存在</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;url.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;错误: url.txt文件不存在&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fi</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 清空之前的日志文件</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$ERROR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 获取开始时间</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">START_TIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +&quot;%Y-%m-%d %H:%M:%S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;开始执行时间: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$START_TIME</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;----------------------------------------&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 计数器</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">TOTAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">SUCCESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FAILED</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 读取url.txt中的每一行并执行curl</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IFS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> read</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">do</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 跳过空行</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-z</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        continue</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fi</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    TOTAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">TOTAL</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;正在处理 [</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$TOTAL</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">]: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 执行curl命令，设置超时时间为30秒</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    response</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;\\n%{http_code}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --connect-timeout</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> 2&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$ERROR_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 获取HTTP状态码（最后一行）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    http_code</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$response</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -n1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 获取响应内容（除去最后一行）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    content</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$response</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;$d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 检查HTTP状态码</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$http_code</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;成功: HTTP </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$http_code</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        SUCCESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SUCCESS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    else</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;失败: HTTP </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$http_code</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;响应内容: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$content</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        FAILED</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">FAILED</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fi</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;----------------------------------------&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 休眠1秒，避免请求过于频繁</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">done</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;url.txt&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 获取结束时间</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">END_TIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +&quot;%Y-%m-%d %H:%M:%S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 输出统计信息</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;执行完成！&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;开始时间: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$START_TIME</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;结束时间: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$END_TIME</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;总计URL数: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$TOTAL</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;成功数: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$SUCCESS</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;失败数: </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$FAILED</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$LOG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-脚本功能说明" tabindex="-1"><a class="header-anchor" href="#_3-脚本功能说明"><span>3. 脚本功能说明</span></a></h3><ol><li><p><strong>日志管理</strong></p><ul><li><code>curl_results.log</code>: 记录所有操作日志和统计信息</li><li><code>curl_errors.log</code>: 记录curl命令执行时的错误信息</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>检查url.txt文件是否存在</li><li>捕获并记录HTTP错误状态码</li><li>记录失败请求的响应内容</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>设置curl超时时间为30秒</li><li>请求间隔1秒，避免对服务器造成压力</li></ul></li><li><p><strong>统计功能</strong></p><ul><li>记录总请求数</li><li>统计成功和失败数量</li><li>记录开始和结束时间</li></ul></li></ol><h3 id="_4-使用说明" tabindex="-1"><a class="header-anchor" href="#_4-使用说明"><span>4. 使用说明</span></a></h3><ol><li>创建脚本文件：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> batch_curl.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><p>复制上述脚本内容到文件中</p></li><li><p>添加执行权限：</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> batch_curl.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li><p>确保url.txt文件存在并包含要调用的URL列表</p></li><li><p>执行脚本：</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./batch_curl.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-执行结果示例" tabindex="-1"><a class="header-anchor" href="#_5-执行结果示例"><span>5. 执行结果示例</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>开始执行时间: 2024-10-31 10:30:00</span></span>\n<span class="line"><span>----------------------------------------</span></span>\n<span class="line"><span>正在处理 [1]: http://api.example.com/service/retry/123456789</span></span>\n<span class="line"><span>成功: HTTP 200</span></span>\n<span class="line"><span>----------------------------------------</span></span>\n<span class="line"><span>正在处理 [2]: http://api.example.com/service/retry/987654321</span></span>\n<span class="line"><span>成功: HTTP 200</span></span>\n<span class="line"><span>----------------------------------------</span></span>\n<span class="line"><span>正在处理 [3]: http://api.example.com/service/retry/456789123</span></span>\n<span class="line"><span>失败: HTTP 404</span></span>\n<span class="line"><span>响应内容: {&quot;error&quot;: &quot;Not Found&quot;}</span></span>\n<span class="line"><span>----------------------------------------</span></span>\n<span class="line"><span>执行完成！</span></span>\n<span class="line"><span>开始时间: 2024-10-31 10:30:00</span></span>\n<span class="line"><span>结束时间: 2024-10-31 10:30:03</span></span>\n<span class="line"><span>总计URL数: 3</span></span>\n<span class="line"><span>成功数: 2</span></span>\n<span class="line"><span>失败数: 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ol><li>执行前请确保有正确的接口访问权限</li><li>根据实际需求调整请求间隔时间</li><li>根据网络情况调整超时时间</li><li>定期清理日志文件避免占用磁盘空间</li><li>建议在非高峰期执行批量操作</li></ol><h2 id="扩展优化" tabindex="-1"><a class="header-anchor" href="#扩展优化"><span>扩展优化</span></a></h2><ol><li>可以添加命令行参数支持，实现更灵活的配置</li><li>可以添加邮件通知功能，在执行完成后发送统计结果</li><li>可以添加重试机制，对失败的请求进行重试</li><li>可以添加并发处理功能，提高处理效率</li><li>可以添加进度条显示功能，提供更直观的执行进度</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这个Shell脚本提供了一个简单但完整的批量调用REST接口的解决方案。它包含了基本的错误处理、日志记录和统计功能，可以满足大多数批量处理场景的需求。根据实际使用情况，你可以对脚本进行调整和扩展，添加更多功能。</p>',29)],h={},t=(0,a(2789).A)(h,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),e=JSON.parse('{"path":"/posts/2024-10-31-blog_linuxshell.html","title":"使用Shell脚本批量调用REST接口","lang":"zh-CN","frontmatter":{"title":"使用Shell脚本批量调用REST接口","category":["Linux","Shell"],"tag":["Shell"],"sticky":true,"star":false,"order":-1,"description":"使用Shell脚本批量调用REST接口 背景介绍 在日常运维工作中，我们经常需要批量调用REST接口来处理数据或触发某些操作。本文将介绍如何使用Shell脚本来实现批量调用REST接口的功能，并包含完整的日志记录和错误处理机制。 需求描述 从文本文件中读取URL列表 使用curl命令依次调用每个接口 记录调用结果和响应状态 统计成功和失败数量 生成详细...","head":[["meta",{"property":"og:url","content":"https://newzone.top/posts/2024-10-31-blog_linuxshell.html"}],["meta",{"property":"og:site_name","content":"LearnData 开源笔记"}],["meta",{"property":"og:title","content":"使用Shell脚本批量调用REST接口"}],["meta",{"property":"og:description","content":"使用Shell脚本批量调用REST接口 背景介绍 在日常运维工作中，我们经常需要批量调用REST接口来处理数据或触发某些操作。本文将介绍如何使用Shell脚本来实现批量调用REST接口的功能，并包含完整的日志记录和错误处理机制。 需求描述 从文本文件中读取URL列表 使用curl命令依次调用每个接口 记录调用结果和响应状态 统计成功和失败数量 生成详细..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-04T03:42:20.000Z"}],["meta",{"property":"article:author","content":"LearnData"}],["meta",{"property":"article:tag","content":"Shell"}],["meta",{"property":"article:modified_time","content":"2024-11-04T03:42:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Shell脚本批量调用REST接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-04T03:42:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LearnData\\",\\"url\\":\\"https://newzone.top\\"}]}"]]},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"需求描述","slug":"需求描述","link":"#需求描述","children":[]},{"level":2,"title":"实现方案","slug":"实现方案","link":"#实现方案","children":[{"level":3,"title":"1. 准备URL文件","slug":"_1-准备url文件","link":"#_1-准备url文件","children":[]},{"level":3,"title":"2. Shell脚本实现","slug":"_2-shell脚本实现","link":"#_2-shell脚本实现","children":[]},{"level":3,"title":"3. 脚本功能说明","slug":"_3-脚本功能说明","link":"#_3-脚本功能说明","children":[]},{"level":3,"title":"4. 使用说明","slug":"_4-使用说明","link":"#_4-使用说明","children":[]},{"level":3,"title":"5. 执行结果示例","slug":"_5-执行结果示例","link":"#_5-执行结果示例","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"扩展优化","slug":"扩展优化","link":"#扩展优化","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730691740000,"updatedTime":1730691740000,"contributors":[{"name":"lengxc","email":"lengxc@qiysd.com","commits":1}]},"readingTime":{"minutes":4.21,"words":1262},"filePathRelative":"_posts/2024-10-31-blog_linuxshell.md","localizedDate":"2024年11月4日","excerpt":"\\n<h2>背景介绍</h2>\\n<p>在日常运维工作中，我们经常需要批量调用REST接口来处理数据或触发某些操作。本文将介绍如何使用Shell脚本来实现批量调用REST接口的功能，并包含完整的日志记录和错误处理机制。</p>\\n<h2>需求描述</h2>\\n<ol>\\n<li>从文本文件中读取URL列表</li>\\n<li>使用curl命令依次调用每个接口</li>\\n<li>记录调用结果和响应状态</li>\\n<li>统计成功和失败数量</li>\\n<li>生成详细的执行日志</li>\\n</ol>\\n<h2>实现方案</h2>\\n<h3>1. 准备URL文件</h3>\\n<p>首先创建一个<code>url.txt</code>文件，每行包含一个需要调用的URL地址：</p>","autoDesc":true}')}}]);